#include <Wire.h>
#include <MPU6050_light.h>
#include "Adafruit_TCS34725.h"
#include "HUSKYLENS.h"
#include <SoftwareSerial.h>
#include <Servo.h>

MPU6050 gyro(Wire);
Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_2_4MS, TCS34725_GAIN_4X);
SoftwareSerial huskySerial(2, 3); // RX, TX
HUSKYLENS huskylens;

Servo steering;
int enA = 5, in1 = 6, in2 = 7, sPort = 9;
const int irPorts[6] = {A0, A1, A2, 3, A6, A7};
const int buttonPort = 8;

float angleZ = 0, filteredZ = 0, alpha = 0.9;
int speed = 0, cornerCount = 0, dir = 0;
unsigned long endTime = 10000000000, cornerScanDelay = 0;
bool cornerDetected = false, caughtOnWall = false;
float steer = 0.0, err = 0;
const float kP = -0.35;
int targetAngle = 0, curColor = 0, target = 0;
HUSKYLENSResult blocks[10];
int blockCount = 0;
HUSKYLENSResult prevObj;
unsigned long prevTimeGyro = 0;
float drift = 0;

void setup() {
  Serial.begin(9600);
  Wire.begin();

  gyro.begin();
  delay(2000);
  gyro.calcGyroOffsets();
  for (int i = 0; i < 6000; i++) {
    gyro.update();
    drift += gyro.getGyroZ();
  }
  drift /= 6000;
  prevTimeGyro = micros();

  if (!tcs.begin()) {
    Serial.println("TCS34725 not found");
    while (1);
  }

  huskySerial.begin(9600);
  huskylens.begin(huskySerial);

  pinMode(enA, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  for (int i : irPorts) pinMode(i, INPUT);
  pinMode(buttonPort, INPUT);

  steering.attach(sPort);
  steering.write(94);

  while (!digitalRead(buttonPort)) delay(10);
}

void move(int speed) {
  speed = constrain(speed, -255, 255);
  analogWrite(enA, abs(speed));
  digitalWrite(in1, speed > 0);
  digitalWrite(in2, speed < 0);
}

void updateGyro() {
  gyro.update();
  unsigned long now = micros();
  float deltaT = (now - prevTimeGyro) / 1000000.0;
  prevTimeGyro = now;
  angleZ += (gyro.getGyroZ() - drift) * deltaT;
  filteredZ = alpha * filteredZ + (1 - alpha) * angleZ;
  if (abs(filteredZ) < 1.5) filteredZ = 0;
}

int getColor() {
  uint16_t r, g, b, c;
  tcs.getRawData(&r, &g, &b, &c);
  if (b > 90 && r < 60) return 2;
  if (r > 80 && b < 60) return 1;
  return 0;
}

void readHuskyBlocks() {
  blockCount = 0;
  if (huskylens.request()) {
    while (huskylens.available()) {
      if (blockCount < 10) {
        blocks[blockCount] = huskylens.read();
        blockCount++;
      } else {
        huskylens.read();
      }
    }
  }
}

HUSKYLENSResult getClosestColorBlock() {
  HUSKYLENSResult closest;
  int minY = 9999;
  for (int i = 0; i < blockCount; i++) {
    if (blocks[i].ID == 1 || blocks[i].ID == 2) { // Assuming IDs 1 and 2 are color IDs
      if (blocks[i].yCenter < minY) {
        minY = blocks[i].yCenter;
        closest = blocks[i];
      }
    }
  }
  return closest;
}

void obstacle() {
  speed = 255;
  steer = -3;
  curColor = getColor();

  readHuskyBlocks();
  HUSKYLENSResult closeBlock = getClosestColorBlock();

  if (closeBlock.ID == 1 || closeBlock.ID == 2) {
    if (closeBlock.ID == 1) target = (207 - closeBlock.yCenter) / 1.5 + 5;
    else target = 310.0 - (207 - closeBlock.yCenter) / 1.5;
    err = target - closeBlock.xCenter;
    steer = err * kP;
    steer = constrain(steer, -30, 30);
    prevObj = closeBlock;
  }

  if (curColor == dir && dir > 0 && millis() - cornerScanDelay > 2000) {
    cornerCount++;
    if (cornerCount >= 12) endTime = millis() + 3500;
    if (cornerCount == 8 && prevObj.ID == 1) {
      targetAngle -= 180;
      dir = 3 - dir;
      unsigned long prevTime = millis();
      move(0);
      delay(3000);
      move(255);
      while (analogRead(irPorts[1]) > 50 || millis() - prevTime < 1000) {
        err = targetAngle - filteredZ;
        steer = err * 2.0;
        steer = constrain(steer, -20, 20);
        if (analogRead(irPorts[0]) <= 25) steer = 30;
        else if (analogRead(irPorts[2]) <= 25) steer = -30;
        steering.write(94 + steer);
        updateGyro();
      }
    }
    cornerScanDelay = millis();
  }

  steering.write(94 + steer);
  move(speed);
}

void open() {
  steer = -1;
  speed = 255;
  if (dir == 0) dir = getColor();

  if (getColor() == dir && dir != 0 && millis() - cornerScanDelay > 2000) {
    delay(60);
    cornerCount++;
    if (cornerCount == 12) endTime = millis() + 3000;
    cornerDetected = true;
    targetAngle += (dir == 1 ? 90 : -90);
    cornerScanDelay = millis();
  }

  if (cornerDetected && analogRead(irPorts[1]) < 40 && !caughtOnWall) {
    steering.write((dir == 1) ? 94 + 30 : 94 - 30);
    while (abs(filteredZ) < (abs(targetAngle) - 25)) updateGyro();
    cornerDetected = false;
    cornerScanDelay = millis();
  }

  err = targetAngle - filteredZ;
  steer = err * 2.0;

  if (cornerCount >= 1 && millis() - cornerScanDelay > 3000 && !caughtOnWall) {
    if (dir == 1 && analogRead(irPorts[2]) < 25) caughtOnWall = true;
    else if (dir == 2 && analogRead(irPorts[0]) < 25) caughtOnWall = true;
  }

  if (analogRead(irPorts[0]) > 200) steer = 30;
  else if (analogRead(irPorts[2]) > 200) steer = -30;

  if (caughtOnWall) {
    err = 20.0 - analogRead(irPorts[2]);
    steer = err * (dir == 1 ? -1.5 : 1.5);
    steer = constrain(steer, -15, 15);
  }

  steer = constrain(steer, -30, 30);
  if (millis() < endTime) {
    steering.write(94 + steer);
    move(speed);
  } else {
    move(0);
    steering.write(94);
    delay(100000000);
  }
}

void loop() {
  updateGyro();
  if (cornerCount < 2) open();
  else obstacle();
  delay(10);
}
